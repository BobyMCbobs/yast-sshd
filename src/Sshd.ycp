/**
 * File:	modules/Sshd.ycp
 * Package:	Configuration of SSHD
 * Summary:	SSHD settings, input and output functions
 * Authors:	Lukas Ocilka <locilka@suse.cz>
 *
 * Representation of the configuration of SSHD.
 * Input and output routines.
 */

{

module "Sshd";
textdomain "sshd";

import "Progress";
import "Report";
import "Message";
import "Service";
import "Popup";
import "SCR";
import "Mode";
import "SuSEFirewall";

/**
 * Data was modified?
 */
boolean modified = false;

/**
 * Sleep time between Read or Write steps
 */
integer sl = 200;

/**
 * Returns whether the configuration has been modified.
 */
global boolean GetModified() {
    return modified;
}

/**
 * Sets that the configuration has been modified.
 */
global void SetModified() {
    modified = true;
}

/**
* map of SSHD settings
*/
    map <string, list<string> > SETTINGS = $[];

    // FIXME: read the default config from configuration file
    map <string, list<string> > DEFAULT_CONFIG = $[
	"Port"				: ["22"],
	"AllowTcpForwarding"		: ["yes"],
	"X11Forwarding"			: ["no"],
	"Compression"			: ["yes"],
	"PrintMotd"			: ["yes"],
	"PermitRootLogin"		: ["yes"],
	"IgnoreUserKnownHosts"		: ["no"],
	"MaxAuthTries"			: ["6"],
	// BNC #469207
	// "PasswordAuthentication"	: ["yes"],
	"RSAAuthentication"		: ["no"],
	"PubkeyAuthentication"		: ["yes"],
	"Ciphers"			: ["aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,aes128-ctr,aes192-ctr,aes256-ctr"],
    ];

/**
 * Reads current sshd configuration
 */
boolean ReadSSHDSettings () {
    foreach (string key, (list <string>) SCR::Dir(.etc.ssh.sshd_config), {
	list <string> val = (list <string>) SCR::Read(add(.etc.ssh.sshd_config, key));
        if (val != nil) SETTINGS[key] = val;
    });

    y2milestone("SSHD configuration has been read: %1", SETTINGS);
    return true;
}

/**
 * Writes current sshd configuration
 */
boolean WriteSSHDSettings () {
    y2milestone("Writing SSHD configuration: %1", SETTINGS);

    foreach (string option_key, list <string> option_val, SETTINGS, {
	SCR::Write(add(.etc.ssh.sshd_config, option_key), option_val);
    });
    // This is very important
    // it flushes the cache, and stores the configuration on the disk
    SCR::Write(.etc.ssh.sshd_config, nil);

    return true;
}

/**
 * Returns the SSHD Option as a list of strings.
 *
 * @param string option_key of the SSHD configuration
 * @return list <string> with option_values
 */
global list <string> GetSSHDOption (string option_key) {
    return SETTINGS[option_key]:DEFAULT_CONFIG[option_key]:[];
}

/**
 * Returns default SSHD Option as a list of strings.
 *
 * @param string option_key of the SSHD configuration
 * @return list <string> with option_values
 */

global list <string> GetDefaultSSHDOption (string option_key) {
	return DEFAULT_CONFIG[option_key]:[];
}

/**
 * Sets values for an option.
 *
 * @param string option_key with the SSHD configuration key
 * @param list <string> option_values with the SSHD configuration values
 */
global void SetSSHDOption (string option_key, list <string> option_vals) {
    SETTINGS[option_key] = option_vals;
}

/**
 * Describes whether the daemon is running
 */
boolean sshd_is_running = false;

/**
 * Reads current sshd status
 */
boolean ReadSSHDService () {
    if (Service::Status("sshd") == 0) {
	sshd_is_running = true;
    } else {
	sshd_is_running = false;
    }

    y2milestone((sshd_is_running ? "SSH is running":"SSH is not running"));

    return true;
}

/**
 * Exports the current configuration.
 *
 * @return map of a current configuration
 *
 * @struct $[
 *   "config" : (map <string, list<string> >) SETTINGS,
 *   "status" : (boolean) service_status,
 * ]
 */
global map Export () {
    return $[
	"config" : SETTINGS,
	"status" : sshd_is_running,
    ];
}

/**
 * Imports a configuration
 */
global boolean Import (map import_map) {
    SETTINGS = (map <string, list<string> >) import_map["config"]:$[];
    sshd_is_running = (import_map["status"]:false == true);
    SetModified();
    y2milestone ("Configuration has been imported");
    return true;
}

/**
 * Restarts the sshd when the daemon was running when starting the configuration
 */
boolean WriteSSHDService () {
    boolean all_ok = true;

    if (sshd_is_running) {
	y2milestone("Restarting sshd daemon");
	all_ok = Service::Restart("sshd");
    } else {
	y2milestone("Sshd is not running - leaving...");
    }

    return all_ok;
}

/**
  Returns a confirmation popup dialog whether user wants to really abort.
 */
global boolean Abort() {
    return Popup::ReallyAbort(GetModified());
}

/**
 * Checks whether an Abort button has been pressed.
 * If so, calls function to confirm the abort call.
 *
 * @return boolean true if abort confirmed
 */
global boolean PollAbort() {
    // Do not check UI when running in CommandLine mode
    if (Mode::commandline())
	return false;

    if (UI::PollInput() == `abort)
	return Abort();

    return false;
}

/**
 * Read all SSHD settings
 * @return true on success
 */
global boolean Read() {

    /* SSHD read dialog caption */
    string caption = _("Initializing the SSHD Configuration");

    integer steps = 3;

    Progress::New( caption, " ", steps, [
	    /* Progress stage 1 */
	    _("Read the current SSHD configuration"),
	    /* Progress stage 2 */
	    _("Read the current SSHD state"),
	    /* Progress stage 3 */
	    _("Read firewall settings")
	], [
	    /* Progress step 1 */
	    _("Reading the current SSHD configuration..."),
	    /* Progress step 2 */
	    _("Reading the current SSHD state..."),
	    /* Progress step 3 */
	    _("Reading firewall settings..."),
	    /* Progress finished */
	    Message::Finished()
	],
	""
    );

    sleep(sl);

    if (PollAbort()) return false;
    Progress::NextStage();
    /* Error message */
    if(!ReadSSHDSettings()) Report::Error(Message::CannotReadCurrentSettings());
    sleep(sl);

    if (PollAbort()) return false;
    Progress::NextStep();
    /* Error message */
    if(!ReadSSHDService()) Report::Error(_("Cannot read the current SSHD state."));
    sleep(sl);

    if (PollAbort()) return false;
    Progress::NextStep();
    boolean progress_state = Progress::set (false);
    /* Error message */
    if(!SuSEFirewall::Read()) Report::Error(_("Cannot read firewall settings."));
    Progress::set (progress_state);
    sleep(sl);

    if (PollAbort()) return false;
    Progress::NextStage ();
    sleep(sl);

    modified = false;
    return true;
}

/**
 * Write all SSHD settings
 * @return true on success
 */
global boolean Write() {

    /* SSHD read dialog caption */
    string caption = _("Saving the SSHD Configuration");

    integer steps = 3;
    
    Progress::New(caption, " ", steps, [
	    /* Progress stage 1 */
	    _("Write the SSHD settings"),
	    /* Progress stage 2 */
	    _("Adjust the SSHD service"),
	    /* Progress stage 3 */
	    _("Write firewall settings")
	], [
	    /* Progress step 1 */
	    _("Writing the SSHD settings..."),
	    /* Progress step 2 */
	    _("Adjusting the SSHD service..."),
	    /* Progress step 3 */
	    _("Writing firewall settings..."),
	    Message::Finished()
	],
	""
    );

    sleep(sl);

    if(PollAbort()) return false;
    Progress::NextStage();
    /* Error message */
    if(!WriteSSHDSettings()) Report::Error (_("Cannot write the SSHD settings."));
    sleep(sl);

    if(PollAbort()) return false;
    Progress::NextStage ();
    /* Error message */
    if(!WriteSSHDService()) Report::Error (Message::CannotAdjustService("sshd"));
    sleep(sl);

    if(PollAbort()) return false;
    Progress::NextStage ();
    boolean progress_state = Progress::set (false);
    /* Error message */
    if(!SuSEFirewall::Write()) Report::Error(_("Cannot write firewall settings."));
    Progress::set (progress_state);
    sleep(sl);

    Progress::NextStage ();
    sleep(sl);

    return true;
}

/* AutoYaST-related functions */

global string Summary () {
    string ret = "";
    
    // TRANSLATORS: summary item
    if (! Sshd::GetModified()) {
	// TRANSLATORS: summary item
	return _("Not configured yet.");
    }

    list <string> ports = Sshd::GetSSHDOption("Port");
    if (size(ports) == 1) {
	// TRANSLATORS: summary item
	ret = ret + sformat(_("SSHD Server will use port: %1"), ports[0]:"");
    } else if (size(ports) > 0) {
	// TRANSLATORS: summary item
	ret = ret + sformat(_("SSHD Server will use ports: %1"), mergestring(ports, ", "));
    }

    return ret;
}

/* AutoYaST-related functions */

}
