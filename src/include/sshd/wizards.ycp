/****************************************************************************

Copyright (c) 2000 - 2012 Novell, Inc.
All Rights Reserved.

This program is free software; you can redistribute it and/or
modify it under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, contact Novell, Inc.

To contact Novell about this file by physical or electronic mail,
you may find current contact information at www.novell.com

****************************************************************************/
/**
 * File:	include/sshd/wizards.ycp
 * Package:	Configuration of sshd
 * Summary:	Wizards definitions
 * Authors:	Lukas Ocilka <locilka@suse.cz>
 */

{

textdomain "sshd";

import "Sequencer";
import "Wizard";
import "CWM";
import "CWMTab";
import "CWMFirewallInterfaces";
import "CWMServiceStart";
import "Sshd";

include "sshd/complex.ycp";
include "sshd/dialogs.ycp";

void SaveAndRestart () {
    Wizard::CreateDialog ();
    Wizard::RestoreHelp (HELPS["write"]:"");
    Sshd::Write ();
    UI::CloseDialog ();
}

/**
 * Main workflow of the sshd configuration
 * @return sequence result
 */
any MainSequence() {

    map <string, map <string, any> > widgets = $[
	"sc" : $[
	    "widget"		: `custom,
	    "help"		: HELPS["server_configuration"]:"",
	    "custom_widget"	: ServerConfigurationDialogContent(),
	    "handle"		: HandleServerConfigurationDialog,
	    "init"		: InitServerConfigurationDialog,
	    "store"		: StoreServerConfigurationDialog,
	],
	"ls" : $[
	    "widget"		: `custom,
	    "help"		: HELPS["login_settings"]:"",
	    "custom_widget"	: LoginSettingsDialogContent(),
	    "init"		: InitLoginSettingsDialog,
	    "store"		: StoreLoginSettingsDialog,
	],
	"pacs" : $[
	    "widget"		: `custom,
	    "help"		: HELPS["proto_settings"]:"",
	    "custom_widget"	: ProtoAndCipherDialogContent(),
	    "handle"		: HandleProtocolConfigurationDialog,
	    "init"		: InitProtocolConfigurationDialog,
	    "store"		: StoreProtocolConfigurationDialog,
	],
	"fw" : CWMFirewallInterfaces::CreateOpenFirewallWidget ($[
	    "services" : [ "service:sshd" ],
	    "display_details" : true,
	]),
	"start_stop" : CWMServiceStart::CreateStartStopWidget ($[
	    "service_id" : "sshd",
	    // label - service status, informative text
	    "service_running_label" : _("SSH server is running"),
	    // label - service status, informative text
	    "service_not_running_label" : _("SSH server is not running"),
	    // push button (SSH service handling)
	    "start_now_button" : _("&Start SSH Server Now"),
	    // push button (SSH service handling)
	    "stop_now_button" : _("S&top SSH Server Now"),
	    "save_now_action" : SaveAndRestart,
	    // push button (SSH service handling)
	    "save_now_button" : _("Save Settings and Reload SSH Server &Now"),
	    "help" : sformat (CWMServiceStart::StartStopHelpTemplate (true),
	    // part of help text, used to describe pusbuttons (matching SSH service handling but without "&")
	    _("Start SSH Server Now"),
	    // part of help text, used to describe pusbuttons (matching SSH service handling but without "&")
	    _("Stop SSH Server Now"),
	    // part of help text, used to describe pusbuttons (matching SSH service handling but without "&")
	    _("Save Settings and Reload SSH Server Now")),
	]),
	"auto_start_up" : CWMServiceStart::CreateAutoStartWidget ($[
	    "get_service_auto_start" : Sshd::GetStartService,
	    "set_service_auto_start" : Sshd::SetStartService,
	    // radio button (starting SSH service - option 1)
	    "start_auto_button" : _("Now and When &Booting"),
	    // radio button (starting SSH service - option 2)
	    "start_manual_button" : _("&Manually"),
	    "help" : sformat (CWMServiceStart::AutoStartHelpTemplate (),
		// part of help text, used to describe radiobuttons (matching starting SSH service but without "&")
		_("Now and When Booting"),
		// part of help text, used to describe radiobuttons (matching starting SSH service but without "&")
		_("Manually")
	    ),
	]),
    ];

    map <string, any> tabs = $[
	"service_configuration" : $[
	    "header" : _("&Start-Up"),
	    "widget_names" : ["start_stop", "auto_start_up"],
	    "contents" : ServiceConfigurationDialogContent(),
	],
	"server_configuration" : $[
	    "header" : _("&General"),
	    "widget_names" : ["sc", "fw"],
	    "contents" : ServerConfigurationDialogContent(),
	],
	"login_settings" : $[
	    "header" : _("&Login Settings"),
	    "widget_names" : ["ls"],
	    "contents" : LoginSettingsDialogContent(),
	],
	"proto_and_cipher" : $[
	    "header" : _("&Protocol and Ciphers"),
	    "widget_names" : ["pacs"],
	    "contents" : ProtoAndCipherDialogContent(),
	],
    ];

    map <string, any> wd = $[
	"tab" : CWMTab::CreateWidget ($[
	    "tab_order" : ["service_configuration", "server_configuration", "login_settings", "proto_and_cipher"],
	    "tabs" : tabs,
	    "widget_descr" : widgets,
	    "initial_tab" : "server_configuration",
	])
    ];

    term contents = `VBox("tab");

    list <map <string, any> > w = CWM::CreateWidgets (["tab"], (map <string, map <string, any> >) wd);

    string caption = _("SSHD Server Configuration");
    contents = CWM::PrepareDialog (contents, w);

    Wizard::SetContentsButtons (
	caption,
	contents,
	"",
	Label::BackButton (),
	Label::OKButton()
    );
    Wizard::HideBackButton ();
    Wizard::SetAbortButton(`abort, Label::CancelButton());
    Wizard::SetDesktopTitleAndIcon("sshd");

    return CWM::Run (w, $[`abort : ReallyExit]);
}

/**
 * AutoYaST configuration of sshd
 * @return sequence result
 */
any SshdAutoSequence() {
    map aliases = $[
	"main"	:   ``( MainSequence() ),
    ];

    map sequence = $[
	"ws_start" : "main",
	"main" : $[
	    `abort	: `abort,
	    `next	: `next
	],
    ];

    Wizard::CreateDialog();

    any ret = Sequencer::Run(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of sshd
 * @return sequence result
 */
any SshdSequence() {

    map aliases = $[
	"read"	: [ ``( ReadDialog() ), true ],
	"main"	:   ``( MainSequence() ),
	"write"	: [ ``( WriteDialog() ), true ]
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" : $[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" : $[
	    `abort	: `abort,
	    `next	: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    Wizard::CreateDialog();
    Wizard::SetDesktopTitleAndIcon("sshd");

    any ret = Sequencer::Run(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

}
