/**
 * File:	include/sshd/wizards.ycp
 * Package:	Configuration of sshd
 * Summary:	Wizards definitions
 * Authors:	Lukas Ocilka <locilka@suse.cz>
 */

{

textdomain "sshd";

import "Sequencer";
import "Wizard";
import "CWM";
import "CWMTab";

include "sshd/complex.ycp";
include "sshd/dialogs.ycp";

/**
 * Main workflow of the sshd configuration
 * @return sequence result
 */
any MainSequence() {

    map <string, map <string, any> > widgets = $[
	"sc" : $[
	    "widget"		: `custom,
	    "help"		: HELPS["server_configuration"]:"",
	    "custom_widget"	: ServerConfigurationDialogContent(),
	    "handle"		: HandleServerConfigurationDialog,
	    "init"		: InitServerConfigurationDialog,
	    "store"		: StoreServerConfigurationDialog,
	],
	"ls" : $[
	    "widget"		: `custom,
	    "help"		: HELPS["login_settings"]:"",
	    "custom_widget"	: LoginSettingsDialogContent(),
	    "init"		: InitLoginSettingsDialog,
	    "store"		: StoreLoginSettingsDialog,
	],
	"pacs" : $[
	    "widget"		: `custom,
	    "help"		: HELPS["proto_settings"]:"",
	    "custom_widget"	: ProtoAndCipherDialogContent(),
	    "handle"		: HandleProtocolConfigurationDialog,
	    "init"		: InitProtocolConfigurationDialog,
	    "store"		: StoreProtocolConfigurationDialog,
	],
    ];

    map <string, any> tabs = $[
	"server_configuration" : $[
	    "header" : _("&General"),
	    "widget_names" : ["sc"],
	    "contents" : ServerConfigurationDialogContent(),
	],
	"login_settings" : $[
	    "header" : _("&Login Settings"),
	    "widget_names" : ["ls"],
	    "contents" : LoginSettingsDialogContent(),
	],
	"proto_and_cipher" : $[
	    "header" : _("&Protocol and Ciphers"),
	    "widget_names" : ["pacs"],
	    "contents" : ProtoAndCipherDialogContent(),
	],
    ];

    map <string, any> wd = $[
	"tab" : CWMTab::CreateWidget ($[
	    "tab_order" : ["server_configuration", "login_settings", "proto_and_cipher"],
	    "tabs" : tabs,
	    "widget_descr" : widgets,
	    "initial_tab" : "server_configuration",
	])
    ];

    term contents = `VBox("tab");

    list <map <string, any> > w = CWM::CreateWidgets (["tab"], (map <string, map <string, any> >) wd);

    string caption = _("SSHD Server Configuration");
    contents = CWM::PrepareDialog (contents, w);

    Wizard::SetContentsButtons (
	caption,
	contents,
	"",
	Label::BackButton (),
	Label::FinishButton()
    );
    Wizard::DisableBackButton ();
    Wizard::SetTitleIcon("yast-sshd");

    return CWM::Run (w, $[`abort : ReallyExit]);
}

/**
 * AutoYaST configuration of sshd
 * @return sequence result
 */
any SshdAutoSequence() {
    map aliases = $[
	"main"	:   ``( MainSequence() ),
    ];

    map sequence = $[
	"ws_start" : "main",
	"main" : $[
	    `abort	: `abort,
	    `next	: `next
	],
    ];

    Wizard::CreateDialog();

    any ret = Sequencer::Run(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of sshd
 * @return sequence result
 */
any SshdSequence() {

    map aliases = $[
	"read"	: [ ``( ReadDialog() ), true ],
	"main"	:   ``( MainSequence() ),
	"write"	: [ ``( WriteDialog() ), true ]
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" : $[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" : $[
	    `abort	: `abort,
	    `next	: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    Wizard::CreateDialog();
    Wizard::SetTitleIcon("yast-sshd");

    any ret = Sequencer::Run(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

}
